calc_weyldndndndn := proc (CCdisporder) local ii, jj, aa, bb, zwischen, 
Oweyldndndndn, Pweyldndndndn; global weyldndndndn; for ii to 4 do for jj to 4
do for aa to 4 do for bb to 4 do weyldndndndn[ii,jj,aa,bb] := riemdndndndn[ii,
jj,aa,bb]-1/2*gdd[ii,bb]*(ricdndn[jj,aa]-1/4*gdd[jj,aa]*ricscalar)-1/2*gdd[jj,
aa]*(ricdndn[ii,bb]-1/4*gdd[ii,bb]*ricscalar)+1/2*gdd[ii,aa]*(ricdndn[jj,bb]-1
/4*gdd[jj,bb]*ricscalar)+1/2*gdd[jj,bb]*(ricdndn[ii,aa]-1/4*gdd[ii,aa]*
ricscalar)-1/12*ricscalar*(gdd[ii,bb]*gdd[jj,aa]-gdd[ii,aa]*gdd[jj,bb]); 
Oweyldndndndn[ii,jj,aa,bb] := subs(sublist,collect(expand(weyldndndndn[ii,jj,
aa,bb]),1/c)); Pweyldndndndn[ii,jj,aa,bb] := subs([seq(1/(c^ii) = 0,ii = 
CCdisporder .. CCmaxorder)],collect(expand(Oweyldndndndn[ii,jj,aa,bb]),1/c));
print(`Weyl curvature (weyldndndndn)[`,ii-1,jj-1,aa-1,bb-1,`]`,subs(displist,
Pweyldndndndn[ii,jj,aa,bb])); if CCoutputfs = 2 then zwischen := weyldndndndn[
ii,jj,aa,bb]; save zwischen, cat(weyldndndndn_,ii,_,jj,_,aa,_,bb,`.full.mpi`)
end if end do end do end do end do end proc;
